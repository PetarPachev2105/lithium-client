{"version":3,"file":"static/js/649.67eb8a54.chunk.js","mappings":"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","sources":["config/index.js","models/apiWorker.js"],"sourcesContent":["const isProduction = true;\n\nlet API_URL = 'http://localhost:5000/api';\nlet WEBSOCKET_URL = 'ws://localhost:5001';\n\nif (isProduction) {\n    API_URL = 'https://api.lithiumawesome.com/api';\n    WEBSOCKET_URL = 'ws://ec2-3-73-50-42.eu-central-1.compute.amazonaws.com';\n}\n\nexport default {\n    API_URL,\n    WEBSOCKET_URL,\n};","/* eslint no-restricted-globals: 0 */\nimport axios from 'axios';\nimport config from '../config/index';\n\nconst {default: PQueue} = require('p-queue');\n\nconst apiUrl = config.API_URL;\n\nconst axiosClient = axios.create({timeout: 1000 * 60 * 15}); // Create custom Axios client, with a large timeout\n\n/* Stores the client id of the parent virtual lithium room */\nlet clientId = null;\n\n/* The session token we need to provide in the API calls */\nlet token = null;\n\n/* Set up our task queue */\nconst queue = new PQueue({concurrency: 1});\n\n/**\n * A helper function to send back error messages back to the virtual lithium room\n * @param functionName\n * @param err\n */\nfunction sendErrorMessage(functionName, err) {\n    /* Extract the error message here, as we only pass a string back to the virtual lithium room, vs. the full object */\n    const errorMessage = err.response && err.response.data && err.response.data.message ? err.response.data.message : err.toString();\n    self.postMessage({\n        name: 'error',\n        payload: {\n            message: `${errorMessage}`,\n        },\n    });\n}\n\n/* HOME WORKER FUNCTIONS */\n\n/**\n * A helper function to send that api worker is initialized successfully\n */\nfunction apiWorkerInitializedHome() {\n    try {\n        self.postMessage({\n            name: 'api-worker-initialized-home',\n            payload: {},\n        });\n    } catch (err) {\n        sendErrorMessage('apiWorkerInitializedHome', err)\n    }\n}\n\n/**\n * Send to API to get the lithium hood and user\n */\nasync function getLithiumHood() {\n    try {\n        const response = await axios.get(`${apiUrl}/lithiumHood/get_lithium_hood`, {\n            headers: {\n                Token: token,\n            },\n        });\n        self.postMessage({\n            name: 'received-lithium-hood',\n            payload: response.data,\n        });\n    } catch (err) {\n        sendErrorMessage('loadMessagesFromServer', err)\n    }\n}\n\n/**\n * Send to API to get the lithium rooms for user\n */\nasync function getLithiumRooms() {\n    try {\n        const response = await axios.get(`${apiUrl}/chatRoom/get_chat_rooms`, {\n            headers: {\n                Token: token,\n            },\n        });\n        self.postMessage({\n            name: 'received-lithium-rooms',\n            payload: response.data,\n        });\n    } catch (err) {\n        sendErrorMessage('loadLithiumRoomsFromServer', err)\n    }\n}\n\n/**\n * Tells Api to create new lithium room\n * @param params\n * @returns {Promise<void>}\n */\nasync function createLithiumRoom(params) {\n    try {\n        const response = await axiosClient.post(`${apiUrl}/chatRoom/create_group_lithium_room`, {\n            name: params.newLithiumRoomName,\n        }, {\n            headers: {\n                Token: token,\n                ClientId: clientId,\n            },\n        });\n        self.postMessage({\n            name: 'created-lithium-room',\n            payload: response.data,\n        });\n    } catch (err) {\n        sendErrorMessage('sendMessage', err)\n    }\n}\n\n/**\n * Tells Api to get lithium hood\n * @returns {Promise<void>}\n */\nasync function getLithiumHoodMembers() {\n    try {\n        const response = await axiosClient.get(`${apiUrl}/lithiumHoodMember/get_lithium_hood_members`,  {\n            headers: {\n                Token: token,\n                ClientId: clientId,\n            },\n        });\n        self.postMessage({\n            name: 'received-lithium-hood-members',\n            payload: response.data,\n        });\n    } catch (err) {\n        sendErrorMessage('sendMessage', err)\n    }\n}\n\n/**\n * Tells Api to create send lithium hood request\n * @param params\n * @returns {Promise<void>}\n */\nasync function sendLithiumHoodRequest(params) {\n    try {\n        const response = await axiosClient.post(`${apiUrl}/lithiumHoodRequest/send_hood_request`, {\n            username: params.username,\n        }, {\n            headers: {\n                Token: token,\n                ClientId: clientId,\n            },\n        });\n        self.postMessage({\n            name: 'sent-lithium-hood-request',\n            payload: {\n                username: params.username,\n            },\n        });\n    } catch (err) {\n        sendErrorMessage('sendMessage', err)\n    }\n}\n\n/**\n * Tells Api to get lithium hood requests\n * @returns {Promise<void>}\n */\nasync function getLithiumHoodRequests() {\n    try {\n        const response = await axiosClient.get(`${apiUrl}/lithiumHoodRequest/get_hood_requests`,  {\n            headers: {\n                Token: token,\n                ClientId: clientId,\n            },\n        });\n        self.postMessage({\n            name: 'received-lithium-hood-requests',\n            payload: response.data,\n        });\n    } catch (err) {\n        sendErrorMessage('sendMessage', err)\n    }\n}\n\n/**\n * Tells Api to accept lithium hood request\n * @returns {Promise<void>}\n */\nasync function acceptLithiumHoodRequests(params) {\n    try {\n        const response = await axiosClient.post(`${apiUrl}/lithiumHoodRequest/${params.lithiumHoodRequestId}/accept_hood_request`,{},{\n            headers: {\n                Token: token,\n                ClientId: clientId,\n            },\n        });\n        self.postMessage({\n            name: 'accepted-lithium-hood-request',\n            payload: response.data,\n        });\n    } catch (err) {\n        sendErrorMessage('sendMessage', err)\n    }\n}\n\n/**\n * Tells Api to decline lithium hood request\n * @returns {Promise<void>}\n */\nasync function declineLithiumHoodRequests(params) {\n    try {\n        const response = await axiosClient.post(`${apiUrl}/lithiumHoodRequest/${params.lithiumHoodRequestId}/decline_hood_request`,{},{\n            headers: {\n                Token: token,\n                ClientId: clientId,\n            },\n        });\n        self.postMessage({\n            name: 'declined-lithium-hood-request',\n            payload: response.data,\n        });\n    } catch (err) {\n        sendErrorMessage('sendMessage', err)\n    }\n}\n\n/**\n * Tells Api to remove user from lithium hood\n * @returns {Promise<void>}\n */\nasync function removingLithiumHoodMember(params) {\n    try {\n        const response = await axiosClient.post(`${apiUrl}/lithiumHoodMember/remove_user_from_hood`,{\n            removedUserUsername: params.username\n        },{\n            headers: {\n                Token: token,\n                ClientId: clientId,\n            },\n        });\n        self.postMessage({\n            name: 'removed-lithium-hood-member',\n            payload: response.data,\n        });\n    } catch (err) {\n        sendErrorMessage('sendMessage', err)\n    }\n}\n\n/* LITHIUM ROOM WORKER FUNCTIONS */\n/**\n * A helper function to send that api worker is initialized successfully\n */\nfunction apiWorkerInitialized() {\n    try {\n        self.postMessage({\n            name: 'api-worker-initialized',\n            payload: {},\n        });\n    } catch (err) {\n        sendErrorMessage('apiWorkerInitialized', err)\n    }\n}\n\n/**\n * Send to API to load all messages from server\n */\nasync function loadMessagesFromServer(params) {\n    try {\n        const chatRoomId = params.chatRoomId;\n        const response = await axiosClient.get(`${apiUrl}/chatRoom/${chatRoomId}/enter_chat_room`, {\n            headers: {\n                Token: token,\n                ClientId: clientId,\n            },\n        });\n        self.postMessage({\n            name: 'messages-loaded',\n            payload: response.data,\n        });\n    } catch (err) {\n        sendErrorMessage('loadMessagesFromServer', err)\n    }\n}\n\n/**\n * Sends the new message to the API\n * @param params\n * @returns {Promise<void>}\n */\nasync function sendMessage(params) {\n    try {\n        const chatRoomId = params.chatRoomId;\n        const response = await axiosClient.post(`${apiUrl}/chatRoom/${chatRoomId}/send_message`, {\n            content: params.content,\n        }, {\n            headers: {\n                Token: token,\n                ClientId: clientId,\n            },\n        });\n        self.postMessage({\n            name: 'message-sent',\n            payload: response.data,\n        });\n    } catch (err) {\n        sendErrorMessage('sendMessage', err)\n    }\n}\n\n/**\n * Send potentially new member username to the API\n * @param params\n * @returns {Promise<void>}\n */\nasync function addMember(params) {\n    try {\n        const lithiumRoomId = params.lithiumRoomId;\n        const response = await axiosClient.post(`${apiUrl}/chatRoom/${lithiumRoomId}/add_member`, {\n            username: params.username,\n        }, {\n            headers: {\n                Token: token,\n                ClientId: clientId,\n            },\n        });\n        self.postMessage({\n            name: 'added-member',\n            payload: response.data,\n        });\n    } catch (err) {\n        sendErrorMessage('sendMessage', err)\n    }\n}\n\n/**\n * Sends the new name of the lithium room to the api\n * @param params\n * @returns {Promise<void>}\n */\nasync function changeName(params) {\n    try {\n        const lithiumRoomId = params.lithiumRoomId;\n        const response = await axiosClient.post(`${apiUrl}/chatRoom/${lithiumRoomId}/change_name`, {\n            name: params.name,\n        }, {\n            headers: {\n                Token: token,\n                ClientId: clientId,\n            },\n        });\n        self.postMessage({\n            name: 'name-changed',\n            payload: response.data,\n        });\n    } catch (err) {\n        sendErrorMessage('changeName', err)\n    }\n}\n\n/**\n * Remove Member from the Lithium Room\n * @param params\n * @returns {Promise<void>}\n */\nasync function removeMember(params) {\n    try {\n        const lithiumRoomId = params.lithiumRoomId;\n        const response = await axiosClient.post(`${apiUrl}/chatRoom/${lithiumRoomId}/remove_member`, {\n            username: params.username,\n        }, {\n            headers: {\n                Token: token,\n                ClientId: clientId,\n            },\n        });\n        self.postMessage({\n            name: 'member-removed',\n            payload: response.data,\n        });\n    } catch (err) {\n        sendErrorMessage('removeMember', err)\n    }\n}\n\n/**\n * Changes member permissions (currently not in use)\n * @param params\n * @returns {Promise<void>}\n */\nasync function changeMemberPermission(params) {\n    try {\n        const lithiumRoomId = params.lithiumRoomId;\n        const response = await axiosClient.post(`${apiUrl}/chatRoom/${lithiumRoomId}/change_member_permission`, {\n            username: params.username,\n            permission: params.permission,\n        }, {\n            headers: {\n                Token: token,\n                ClientId: clientId,\n            },\n        });\n        self.postMessage({\n            name: 'changed-member-permission',\n            payload: response.data,\n        });\n    } catch (err) {\n        sendErrorMessage('changeMemberPermission', err)\n    }\n}\n\n/**\n * Loads old messages from the server\n * @param params\n * @returns {Promise<void>}\n */\nasync function loadOldMessages(params) {\n    try {\n        const lithiumRoomId = params.lithiumRoomId;\n        const response = await axiosClient.get(`${apiUrl}/chatRoom/${lithiumRoomId}/${params.message_number}/load_old_messages`, {\n            headers: {\n                Token: token,\n                ClientId: clientId,\n            },\n        });\n        self.postMessage({\n            name: 'loaded-old-messages',\n            payload: response.data,\n        });\n    } catch (err) {\n        sendErrorMessage('loadOldMessages', err)\n    }\n}\n\n\n/**\n * Main message receiver\n * @param e\n * @returns {Promise<void>}\n */\nself.onmessage = async (e) => {\n    // console.log(`e.data: ${JSON.stringify(e.data)}`);\n    const taskName = e.data.name;\n    const taskPayload = e.data.payload;\n\n    // console.log(`apiWorker - received task ${taskName} with ${JSON.stringify(taskPayload)}`);\n    /* LITHIUM SPACE FUNCTIONS */\n    if (taskName === 'init-home') {\n        clientId = taskPayload.clientId;\n        token = taskPayload.token;\n        await queue.add(async () => {\n            await apiWorkerInitializedHome();\n        });\n    } else if (taskName === 'getting-lithium-hood') {\n        await queue.add(async () => {\n            await getLithiumHood();\n        });\n    } else if (taskName === 'getting-lithium-rooms') {\n        await queue.add(async () => {\n            await getLithiumRooms();\n        });\n    } else if (taskName === 'creating-lithium-room') {\n        await queue.add(async () => {\n            await createLithiumRoom(taskPayload);\n        });\n    } else if (taskName === 'getting-lithium-hood-members') {\n        await queue.add(async () => {\n            await getLithiumHoodMembers();\n        });\n    } else if (taskName === 'getting-lithium-hood-requests') {\n        await queue.add(async () => {\n            await getLithiumHoodRequests();\n        });\n    } else if (taskName === 'sending-lithium-hood-request') {\n        await queue.add(async () => {\n            await sendLithiumHoodRequest(taskPayload);\n        });\n    } else if (taskName === 'accepting-lithium-hood-request') {\n        await queue.add(async () => {\n            await acceptLithiumHoodRequests(taskPayload);\n        });\n    } else if (taskName === 'declining-lithium-hood-request') {\n        await queue.add(async () => {\n            await declineLithiumHoodRequests(taskPayload);\n        });\n    } else if (taskName === 'removing-lithium-hood-member') {\n        await queue.add(async () => {\n            await removingLithiumHoodMember(taskPayload);\n        });\n        /* LITHIUM ROOM FUNCTIONS */\n    } else if (taskName === 'init') {\n        /* Initialization code */\n        clientId = taskPayload.clientId;\n        token = taskPayload.token;\n        await queue.add(async () => {\n            await apiWorkerInitialized();\n        });\n    } else if (taskName === 'load-messages') {\n        await queue.add(async () => {\n            await loadMessagesFromServer(taskPayload);\n        });\n    } else if (taskName === 'sending-message') {\n        await queue.add(async () => {\n            await sendMessage(taskPayload);\n        });\n    } else if (taskName === 'adding-member') {\n        await queue.add(async () => {\n            await addMember(taskPayload);\n        });\n    } else if (taskName === 'removing-member') {\n        await queue.add(async () => {\n            await removeMember(taskPayload);\n        });\n    } else if (taskName === 'changing-name') {\n        await queue.add(async () => {\n            await changeName(taskPayload);\n        });\n    } else if (taskName === 'removing-name') {\n        await queue.add(async () => {\n            await removeMember(taskPayload);\n        });\n    } else if (taskName === 'changing-member-permission') {\n        await queue.add(async () => {\n            await changeMemberPermission(taskPayload);\n        });\n    } else if (taskName === 'loading-old-messages') {\n        await queue.add(async () => {\n            await loadOldMessages(taskPayload);\n        });\n    }\n};"],"names":["API_URL","WEBSOCKET_URL","PQueue","require","default","apiUrl","config","axiosClient","axios","timeout","clientId","token","queue","concurrency","sendErrorMessage","functionName","err","errorMessage","response","data","message","toString","self","postMessage","name","payload","apiWorkerInitializedHome","getLithiumHood","headers","Token","getLithiumRooms","createLithiumRoom","params","post","newLithiumRoomName","ClientId","getLithiumHoodMembers","get","sendLithiumHoodRequest","username","getLithiumHoodRequests","acceptLithiumHoodRequests","lithiumHoodRequestId","declineLithiumHoodRequests","removingLithiumHoodMember","removedUserUsername","apiWorkerInitialized","loadMessagesFromServer","chatRoomId","sendMessage","content","addMember","lithiumRoomId","changeName","removeMember","changeMemberPermission","permission","loadOldMessages","message_number","onmessage","e","taskName","taskPayload","add"],"sourceRoot":""}